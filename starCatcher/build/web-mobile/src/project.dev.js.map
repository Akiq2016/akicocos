{"version":3,"sources":["assets/scripts/GameOver.js","assets/scripts/Game.js","assets/scripts/Player.js","assets/scripts/Star.js","assets/scripts/common/global.js"],"names":["GLOBAL","require","cc","Class","extends","Component","properties","scoreLabel","default","type","Label","start","this","setScore","lastScore","score","str","string","slice","indexOf","startGame","director","loadScene","getScene","getChildByName","getComponent","maxStarDuration","minStarDuration","starPrefab","Prefab","starProgress","ProgressBar","ground","Node","player","startBtn","scoreAudio","AudioClip","gameHint","gameHintOnDesktop","multiline","gameHintOnMobile","onLoad","groundY","y","height","enabled","setGameHint","starPool","NodePool","update","dt","size","gameOver","timer","updateStarProgress","onEnable","generateStarProgress","setNewStarRelated","active","totalLength","node","width","reverse","progress","star","opacity","generateStar","resetParamsThatDependOnStar","get","instantiate","addChild","setPosition","getStarPosition","init","starDuration","getStarDuration","Math","random","Y","jumpHeight","X","v2","gainScore","audioEngine","play","sys","isMobile","jumpDuration","deformDuration","maxMoveSpeed","acceleration","jumpAudio","game","leftAccelarate","rightAccelarate","xSpeed","maxMoveX","parent","initKeyboardEvent","initTouchEvent","runAction","setJumpAction","abs","x","shrinkBall","scaleTo","restoreBall","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","repeatForever","sequence","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","macro","KEY","left","right","KEY_UP","currentCanvas","Canvas","instance","TOUCH_START","TOUCH_LOCATION","getLocation","winSize","TOUCH_END","pickRadius","serializable","enable","getToPlayerDistance","onPicked","opacityRate","floor","put","position","sub","mag","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAAA,SAAAC,QAAA;IACAC,GAAAC;MACEC,SAAAF,GAAAG;MAEAC;QACEC;UACEC,SAAA;UACAC,MAAAP,GAAAQ;;;MAIJC,OAAA,SAAAA;QACEC,KAAAC,SAAAb,OAAAc;;MAGFD,UAAA,SAAAA,SAAAE;QACE,IAAAC,MAAAJ,KAAAL,WAAAU;QACAL,KAAAL,WAAAU,SAAAD,IAAAE,MAAA,GAAAF,IAAAG,QAAA,OAAA,KAAAJ;;MAGFK,WAAA,SAAAA;QACElB,GAAAmB,SAAAC,UAAA,QAAA;UACEpB,GAAAmB,SAAAE,WAAAC,eAAA,QAAAC,aAAA,QAAAL;;;;;;;;;;;;ICtBN,IAAApB,SAAAC,QAAA;IAEAC,GAAAC;MACEC,SAAAF,GAAAG;MAEAC;QACEoB,iBAAA;QACAC,iBAAA;QACAC;UACEpB,SAAA;UACAC,MAAAP,GAAA2B;;QAEFC;UACEtB,SAAA;UACAC,MAAAP,GAAA6B;;QAEFC;UACExB,SAAA;UACAC,MAAAP,GAAA+B;;QAEFC;UACE1B,SAAA;UACAC,MAAAP,GAAA+B;;QAEFE;UACE3B,SAAA;UACAC,MAAAP,GAAA+B;;QAEF1B;UACEC,SAAA;UACAC,MAAAP,GAAAQ;;QAEF0B;UACE5B,SAAA;UACAC,MAAAP,GAAAmC;;QAEFC;UACE9B,SAAA;UACAC,MAAAP,GAAAQ;;QAEF6B;UACE/B,SAAA;UACAgC,WAAA;;QAEFC;UACEjC,SAAA;UACAgC,WAAA;;;MAIJE,QAAA,SAAAA;QAGE9B,KAAA+B,UAAA/B,KAAAoB,OAAAY,IAAAhC,KAAAoB,OAAAa,SAAA;QAGAjC,KAAAkC,UAAA;QAGAlC,KAAAmC;QAGAnC,KAAAoC,WAAA,IAAA9C,GAAA+C,SAAA;;MAGFC,QAAA,SAAAA,OAAAC;QACE,IAAAvC,KAAAoC,SAAAI,UAAA,GAAA;UACExC,KAAAyC;UAGAzC,KAAAkC,UAAA;eACD;UACClC,KAAA0C,SAAAH;UACAvC,KAAA2C;;;MAIJC,UAAA,SAAAA;QAEE5C,KAAAG,QAAA;QAGAH,KAAA6C;QACA7C,KAAA8C;QAGA9C,KAAAsB,OAAAyB,SAAA;QACA/C,KAAAsB,OAAAT,aAAA,UAAAqB,UAAA;;MAGFW,sBAAA,SAAAA;QACE7C,KAAAkB,aAAA8B,cAAAhD,KAAAkB,aAAA+B,KAAAC;QACAlD,KAAAkB,aAAA+B,KAAAF,SAAA;QACA/C,KAAAkB,aAAAiC,UAAA;;MAGFR,oBAAA,SAAAA;QACE3C,KAAAkB,aAAAkC,YAAApD,KAAAqD,KAAAC,UAAA,KAAA;;MAGFR,mBAAA,SAAAA;QACE9C,KAAAuD;QACAvD,KAAAwD;;MAGFD,cAAA,SAAAA;QAEEvD,KAAAqD,OAAArD,KAAAoC,SAAAI,UAAA,IAAAxC,KAAAoC,SAAAqB,QAAAnE,GAAAoE,YAAA1D,KAAAgB;QAGAhB,KAAAiD,KAAAU,SAAA3D,KAAAqD;QACArD,KAAAqD,KAAAO,YAAA5D,KAAA6D;QACA7D,KAAAqD,KAAAxC,aAAA,QAAAiD,KAAA9D;;MAGFwD,6BAAA,SAAAA;QACExD,KAAA0C,QAAA;QACA1C,KAAA+D,eAAA/D,KAAAgE;QACAhE,KAAAkB,aAAAkC,WAAA;;MAGFY,iBAAA,SAAAA;QACE,OAAAhE,KAAAe,kBAAAkD,KAAAC,YAAAlE,KAAAc,kBAAAd,KAAAe;;MAGF8C,iBAAA,SAAAA;QACE,IAAAM,IAAAnE,KAAA+B,UAAA/B,KAAAqD,KAAApB,SAAA,IAAAgC,KAAAC,WAAAlE,KAAAsB,OAAAT,aAAA,UAAAuD;QACA,IAAAC,IAAA,KAAAJ,KAAAC,WAAA,QAAAlE,KAAAiD,KAAAC,QAAAlD,KAAAqD,KAAAH,SAAA;QACA,OAAA5D,GAAAgF,GAAAD,GAAAF;;MAGFI,WAAA,SAAAA;QACE,IAAAnE,MAAAJ,KAAAL,WAAAU;QACAL,KAAAG,SAAA;QACAH,KAAAL,WAAAU,SAAAD,IAAAE,MAAA,GAAAF,IAAAG,QAAA,OAAA,KAAAP,KAAAG;QACAb,GAAAkF,YAAAC,KAAAzE,KAAAwB,YAAA;;MAGFW,aAAA,SAAAA;QACEnC,KAAA0B,SAAArB,SAAAf,GAAAoF,IAAAC,WAAA3E,KAAA6B,mBAAA7B,KAAA2B;;MAKFnB,WAAA,SAAAA;QACER,KAAAkC,UAAA;QACAlC,KAAAuB,SAAAwB,SAAA;;MAGFN,UAAA,SAAAA;QACErD,OAAAc,YAAAF,KAAAG;QACAb,GAAAmB,SAAAC,UAAA;;;;;;;;;;;ICvJJpB,GAAAC;MAIEC,SAAAF,GAAAG;MAKAC;QACE0E,YAAA;QACAQ,cAAA;QACAC,gBAAA;QACAC,cAAA;QACAC,cAAA;QACAC;UACEpF,SAAA;UACAC,MAAAP,GAAAmC;;QAEFwD;UACErF,SAAA;UACAC,MAAAP,GAAA+B;;;MAMJS,QAAA,SAAAA;QACE9B,KAAAkC,UAAA;QAEAlC,KAAAkF,iBAAA;QACAlF,KAAAmF,kBAAA;QACAnF,KAAAoF,SAAA;QACApF,KAAAqF,WAAArF,KAAAiD,KAAAqC,OAAApC,QAAAlD,KAAAiD,KAAAC;QAEAlD,KAAAuF;QACAvF,KAAAwF;;MAIFzF,OAAA,SAAAA;MAGA6C,UAAA,SAAAA;QAEE5C,KAAAiD,KAAAW,YAAAtE,GAAAgF,GAAA,GAAAtE,KAAAiF,KAAApE,aAAA,QAAAkB;QAGA/B,KAAAiD,KAAAwC,UAAAzF,KAAA0F;;MASFpD,QAAA,SAAAA,OAAAC;QAEEvC,KAAAkF,iBACElF,KAAAoF,UAAApF,KAAA+E,eAAAxC,KACDvC,KAAAmF,oBACCnF,KAAAoF,UAAApF,KAAA+E,eAAAxC;QAIF0B,KAAA0B,IAAA3F,KAAAoF,UAAApF,KAAA8E,iBACE9E,KAAAoF,SAAApF,KAAA8E,eAAA9E,KAAAoF,SAAAnB,KAAA0B,IAAA3F,KAAAoF;QAIFnB,KAAA0B,IAAA3F,KAAAiD,KAAA2C,IAAA5F,KAAAoF,SAAA7C,MAAAvC,KAAAqF,WAAA,IACErF,KAAAiD,KAAA2C,KAAA5F,KAAAoF,SAAA7C,KAKAvC,KAAAoF,SAAA;;MAQJM,eAAA,SAAAA;QAIE,IAAAG,aAAAvG,GAAAwG,QAAA9F,KAAA6E,gBAAA,GAAA;QACA,IAAAkB,cAAAzG,GAAAwG,QAAA9F,KAAA6E,gBAAA,GAAA;QACA,IAAAmB,SAAA1G,GAAA2G,OAAAjG,KAAA4E,cAAAtF,GAAAgF,GAAA,GAAAtE,KAAAoE,aAAA8B,OAAA5G,GAAA6G;QACA,IAAAC,WAAA9G,GAAA2G,OAAAjG,KAAA4E,cAAAtF,GAAAgF,GAAA,IAAAtE,KAAAoE,aAAA8B,OAAA5G,GAAA+G;QACA,IAAAC,WAAAhH,GAAAiH,SAAA;UACEjH,GAAAkF,YAAAC,KAAAzE,KAAAgF,WAAA;WACDhF;QACD,OAAAV,GAAAkH,cAAAlH,GAAAmH,SAAAZ,YAAAE,aAAAC,QAAAI,UAAAE;;MAGFf,mBAAA,SAAAA;QACEjG,GAAAoH,YAAAC,GAAArH,GAAAsH,YAAAC,UAAAC,UAAA,SAAAC;UACE,QAAAA,MAAAC;WACE,KAAA1H,GAAA2H,MAAAC,IAAAC;YACEnH,KAAAkF,iBAAA;YACA;;WACF,KAAA5F,GAAA2H,MAAAC,IAAAE;YACEpH,KAAAmF,kBAAA;;WAGLnF;QAEDV,GAAAoH,YAAAC,GAAArH,GAAAsH,YAAAC,UAAAQ,QAAA,SAAAN;UACE,QAAAA,MAAAC;WACE,KAAA1H,GAAA2H,MAAAC,IAAAC;YACEnH,KAAAkF,iBAAA;YACA;;WACF,KAAA5F,GAAA2H,MAAAC,IAAAE;YACEpH,KAAAmF,kBAAA;;WAGLnF;;MAGHwF,gBAAA,SAAAA;QACE,IAAA8B,gBAAAhI,GAAAiI,OAAAC,SAAAvE;QAEAqE,cAAAX,GAAArH,GAAA+B,KAAAwF,UAAAY,aAAA,SAAAV;UACE,IAAAW,iBAAAX,MAAAY;UACA,IAAAD,eAAA9B,IAAAtG,GAAAsI,QAAA1E,QAAA,GAAA;YACElD,KAAAkF,iBAAA;YACAlF,KAAAmF,kBAAA;iBACD;YACCnF,KAAAkF,iBAAA;YACAlF,KAAAmF,kBAAA;;WAEHnF;QAEDsH,cAAAX,GAAArH,GAAA+B,KAAAwF,UAAAgB,WAAA,SAAAd;UACE/G,KAAAkF,iBAAA;UACAlF,KAAAmF,kBAAA;WACDnF;;;;;;;;;IC5ILV,GAAAC;MACEC,SAAAF,GAAAG;MAEAC;QACEoI,YAAA;QACA7C;UACErF,SAAA;UAKAmI,cAAA;;;MAIJjG,QAAA,SAAAA;QACE9B,KAAAgI,SAAA;;MAGFlE,MAAA,SAAAA,KAAAmB;QACEjF,KAAAiF,OAAAA;QACAjF,KAAAgI,SAAA;QACAhI,KAAAiD,KAAAK,UAAA;;MAGFhB,QAAA,SAAAA,OAAAC;QACE,IAAAvC,KAAAiI,wBAAAjI,KAAA8H,YACE9H,KAAAkI,iBACD;UACC,IAAAC,cAAA,IAAAnI,KAAAiF,KAAAvC,QAAA1C,KAAAiF,KAAAlB;UACA/D,KAAAiD,KAAAK,UAAAW,KAAAmE,MAAA,MAAAD;UACAnI,KAAAiD,KAAAK,UAAA,KACEtD,KAAAiF,KAAA7C,SAAAiG,IAAArI,KAAAiD;;;MAQNgF,qBAAA,SAAAA;QACE,OAAAjI,KAAAiD,KAAAqF,SAAAC,IAAAvI,KAAAiF,KAAA3D,OAAAgH,UAAAE;;MAGFN,UAAA,SAAAA;QACElI,KAAAiF,KAAAV;QACAvE,KAAAiF,KAAA7C,SAAAiG,IAAArI,KAAAiD;QACAjD,KAAAiF,KAAAnC;;;;;;;;;IC/CJ2F,OAAAC;MACExI,WAAA","sourcesContent":["const GLOBAL = require('global')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    scoreLabel: {\r\n      default: null,\r\n      type: cc.Label\r\n    },\r\n  },\r\n\r\n  start: function () {\r\n    this.setScore(GLOBAL.lastScore)\r\n  },\r\n\r\n  setScore: function (score) {\r\n    let str = this.scoreLabel.string\r\n    this.scoreLabel.string = str.slice(0, str.indexOf(':') + 2) + score;\r\n  },\r\n\r\n  startGame: function () {\r\n    cc.director.loadScene('game', function () {\r\n      cc.director.getScene().getChildByName('game').getComponent('Game').startGame()\r\n    })\r\n  },\r\n\r\n});\r\n","const GLOBAL = require('global')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    maxStarDuration: 0,\r\n    minStarDuration: 0,\r\n    starPrefab: {\r\n      default: null,\r\n      type: cc.Prefab\r\n    },\r\n    starProgress: {\r\n      default: null,\r\n      type: cc.ProgressBar\r\n    },\r\n    ground: {\r\n      default: null,\r\n      type: cc.Node\r\n    },\r\n    player: {\r\n      default: null,\r\n      type: cc.Node\r\n    },\r\n    startBtn: {\r\n      default: null,\r\n      type: cc.Node\r\n    },\r\n    scoreLabel: {\r\n      default: null,\r\n      type: cc.Label\r\n    },\r\n    scoreAudio: {\r\n      default: null,\r\n      type: cc.AudioClip\r\n    },\r\n    gameHint: {\r\n      default: null,\r\n      type: cc.Label\r\n    },\r\n    gameHintOnDesktop: {\r\n      default: '',\r\n      multiline: true\r\n    },\r\n    gameHintOnMobile: {\r\n      default: '',\r\n      multiline: true\r\n    }\r\n  },\r\n\r\n  onLoad() {\r\n    // Get the y-axis coordinate of the ground plane\r\n    // (that base on the anchor is still on the center position as default)\r\n    this.groundY = this.ground.y + this.ground.height / 2\r\n\r\n    // init game component status\r\n    this.enabled = false\r\n\r\n    // set game hint for different device\r\n    this.setGameHint()\r\n\r\n    // initialize star pool\r\n    this.starPool = new cc.NodePool('Star')\r\n  },\r\n\r\n  update(dt) {\r\n    if (this.starPool.size() >= 1) {\r\n      this.gameOver()\r\n\r\n      // disable this to avoid gameOver() repeatedly\r\n      this.enabled = false\r\n    } else {\r\n      this.timer += dt\r\n      this.updateStarProgress()\r\n    }\r\n  },\r\n\r\n  onEnable() {\r\n    // initiate score\r\n    this.score = 0\r\n\r\n    // initiate star related\r\n    this.generateStarProgress()\r\n    this.setNewStarRelated()\r\n\r\n    // initiate player\r\n    this.player.active = true\r\n    this.player.getComponent('Player').enabled = true\r\n  },\r\n\r\n  generateStarProgress() {\r\n    this.starProgress.totalLength = this.starProgress.node.width\r\n    this.starProgress.node.active = true\r\n    this.starProgress.reverse = false\r\n  },\r\n\r\n  updateStarProgress() {\r\n    this.starProgress.progress = (this.star.opacity - 5) / 250\r\n  },\r\n\r\n  setNewStarRelated() {\r\n    this.generateStar()\r\n    this.resetParamsThatDependOnStar()\r\n  },\r\n\r\n  generateStar() {\r\n    // instantiate new nodes from Prefab\r\n    this.star = this.starPool.size() >= 1\r\n      ? this.starPool.get()\r\n      : cc.instantiate(this.starPrefab)\r\n    this.node.addChild(this.star)\r\n    this.star.setPosition(this.getStarPosition())\r\n    this.star.getComponent('Star').init(this)\r\n  },\r\n\r\n  resetParamsThatDependOnStar() {\r\n    this.timer = 0\r\n    this.starDuration = this.getStarDuration()\r\n    this.starProgress.progress = 1\r\n  },\r\n\r\n  getStarDuration() {\r\n    return this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration)\r\n  },\r\n\r\n  getStarPosition() {\r\n    var Y = this.groundY + this.star.height / 2 + Math.random() * this.player.getComponent('Player').jumpHeight\r\n    var X = (Math.random() - 0.5) * 2 * ((this.node.width - this.star.width) / 2)\r\n    return cc.v2(X, Y)\r\n  },\r\n\r\n  gainScore() {\r\n    let str = this.scoreLabel.string\r\n    this.score += 1\r\n    this.scoreLabel.string = str.slice(0, str.indexOf(':') + 2) + this.score\r\n    cc.audioEngine.play(this.scoreAudio, false)\r\n  },\r\n\r\n  setGameHint() {\r\n    this.gameHint.string = cc.sys.isMobile\r\n      ? this.gameHintOnMobile\r\n      : this.gameHintOnDesktop\r\n  },\r\n\r\n  startGame() {\r\n    this.enabled = true\r\n    this.startBtn.active = false\r\n  },\r\n\r\n  gameOver() {\r\n    GLOBAL.lastScore = this.score\r\n    cc.director.loadScene('gameover')\r\n  },\r\n})\r\n","cc.Class({\r\n  // cc.Component:\r\n  // basic class for all the components\r\n  // if `extends` property is declared, the constructor of this specific class will be auto invoked\r\n  extends: cc.Component,\r\n\r\n  // By declaring properties in the component script,\r\n  // these properties can be visualized in the Property inspector,\r\n  // making it easy to adjust values in the scene.\r\n  properties: {\r\n    jumpHeight: 0,\r\n    jumpDuration: 0,\r\n    deformDuration: 0,\r\n    maxMoveSpeed: 0,\r\n    acceleration: 0,\r\n    jumpAudio: {\r\n      default: null,\r\n      type: cc.AudioClip,\r\n    },\r\n    game: {\r\n      default: null,\r\n      type: cc.Node\r\n    }\r\n  },\r\n\r\n  // at the stage of `onLoad`, other nodes and their assets can be accessed.\r\n  // `onLoad` method always be executed before any `start` method.\r\n  onLoad () {\r\n    this.enabled = false;\r\n\r\n    this.leftAccelarate = false;\r\n    this.rightAccelarate = false;\r\n    this.xSpeed = 0;\r\n    this.maxMoveX = this.node.parent.width - this.node.width\r\n\r\n    this.initKeyboardEvent()\r\n    this.initTouchEvent()\r\n  },\r\n\r\n  // executed after `onLoad` of all the components\r\n  start () {\r\n  },\r\n\r\n  onEnable () {\r\n    // initiate position\r\n    this.node.setPosition(cc.v2(0, this.game.getComponent('Game').groundY))\r\n\r\n    // run action\r\n    this.node.runAction(this.setJumpAction());\r\n  },\r\n\r\n  /**\r\n   * `update` will be called once per frame after the scene is loaded\r\n   * Generally put the stuff that needs to be calculated frequently or updated in time.\r\n   * \r\n   * @param {number} dt delta time\r\n   */\r\n  update: function (dt) {\r\n    // 1. update speed: v = v0 + at\r\n    if (this.leftAccelarate) {\r\n      this.xSpeed -= this.acceleration * dt;\r\n    } else if (this.rightAccelarate) {\r\n      this.xSpeed += this.acceleration * dt;\r\n    }\r\n\r\n    // if speed reach limit, use max speed with current direction\r\n    if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\r\n      this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n    }\r\n\r\n    // 2. update position: x = x0 + vt\r\n    if (Math.abs(this.node.x + this.xSpeed * dt) < (this.maxMoveX / 2)) {\r\n      this.node.x += this.xSpeed * dt;\r\n    } else {\r\n      // as it touch the boundary, to let him back,\r\n      // instead of letting xSpeed slowly slow down to 0 and having speed in the opposite direction,\r\n      // set it's xSpeed to 0 directly.\r\n      this.xSpeed = 0;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * setJumpAction\r\n   * @return {ActionInterval}\r\n   */\r\n  setJumpAction: function () {\r\n    // using cc.v2 to create a cc.Vec2 object which is represented 2D vectors and coordinates\r\n    // cc.moveBy(duration<Number>, deltaPos<Vec2|Number>)\r\n    // cc.sequence(actions) The actions are performed in sequence.\r\n    var shrinkBall = cc.scaleTo(this.deformDuration, 1, 0.6)\r\n    var restoreBall = cc.scaleTo(this.deformDuration, 1, 1)\r\n    var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut())\r\n    var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn())\r\n    var callback = cc.callFunc(function () {\r\n      cc.audioEngine.play(this.jumpAudio, false)\r\n    }, this);\r\n    return cc.repeatForever(cc.sequence(shrinkBall, restoreBall, jumpUp, jumpDown, callback));\r\n  },\r\n\r\n  initKeyboardEvent: function () {\r\n    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function (event) {\r\n      switch(event.keyCode) {\r\n        case cc.macro.KEY.left:\r\n          this.leftAccelarate = true;\r\n          break;\r\n        case cc.macro.KEY.right:\r\n          this.rightAccelarate = true;\r\n          break;\r\n      }\r\n    }, this);\r\n\r\n    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function (event) {\r\n      switch(event.keyCode) {\r\n        case cc.macro.KEY.left:\r\n          this.leftAccelarate = false;\r\n          break;\r\n        case cc.macro.KEY.right:\r\n          this.rightAccelarate = false;\r\n          break;\r\n      }\r\n    }, this);\r\n  },\r\n\r\n  initTouchEvent: function () {\r\n    let currentCanvas = cc.Canvas.instance.node\r\n\r\n    currentCanvas.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n      const TOUCH_LOCATION = event.getLocation()\r\n      if (TOUCH_LOCATION.x > cc.winSize.width / 2) {\r\n        this.leftAccelarate = false\r\n        this.rightAccelarate = true\r\n      } else {\r\n        this.leftAccelarate = true\r\n        this.rightAccelarate = false\r\n      }\r\n    }, this)\r\n\r\n    currentCanvas.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n      this.leftAccelarate = false\r\n      this.rightAccelarate = false\r\n    }, this)\r\n  }\r\n});\r\n","cc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    pickRadius: 0,\r\n    game: {\r\n      default: null,\r\n      // Attributes that specify the default default value are serialized by default.\r\n      // After serialization, the values set in the editor are saved to the scene and other resource files,\r\n      // and the previously set values are automatically restored when the scene is loaded.\r\n      // If you do not want to serialize, you can set serializable: false.\r\n      serializable: false\r\n    }\r\n  },\r\n\r\n  onLoad() {\r\n    this.enable = false\r\n  },\r\n\r\n  init(game) {\r\n    this.game = game\r\n    this.enable = true\r\n    this.node.opacity = 255\r\n  },\r\n\r\n  update(dt) {\r\n    if (this.getToPlayerDistance() < this.pickRadius) {\r\n      this.onPicked()\r\n    } else {\r\n      var opacityRate = 1 - this.game.timer / this.game.starDuration\r\n      this.node.opacity = Math.floor(255 * opacityRate)\r\n      if (this.node.opacity < 5) {\r\n        this.game.starPool.put(this.node)\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @return {number} distance\r\n   */\r\n  getToPlayerDistance: function () {\r\n    return this.node.position.sub(this.game.player.position).mag()\r\n  },\r\n\r\n  onPicked: function() {\r\n    this.game.gainScore()\r\n    this.game.starPool.put(this.node)\r\n    this.game.setNewStarRelated()\r\n  },\r\n});\r\n","module.exports = {\r\n  lastScore: 0,\r\n}"],"sourceRoot":"/source/","file":"project.dev.js"}