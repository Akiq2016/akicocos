{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","update","dt","getToPlayerDistance","onPicked","opacityRate","timer","starDuration","node","opacity","Math","floor","destroy","position","sub","player","getPosition","mag","generateStar","gainScore"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACPC,WAASF,GAAGG,SADL;;AAGPC,cAAY;AACVC,gBAAY,CADF;AAEVC,UAAM;AACJC,eAAS,IADL;AAEJ;AACA;AACA;AACA;AACAC,oBAAc;AANV;AAFI,GAHL;;AAePC,QAfO,kBAeCC,EAfD,EAeK;AACV,QAAI,KAAKC,mBAAL,KAA6B,KAAKN,UAAtC,EAAkD;AAChD,WAAKO,QAAL;AACD,KAFD,MAEO;AACL,UAAIC,cAAc,IAAI,KAAKP,IAAL,CAAUQ,KAAV,GAAkB,KAAKR,IAAL,CAAUS,YAAlD;AACA,WAAKC,IAAL,CAAUC,OAAV,GAAoBC,KAAKC,KAAL,CAAW,MAAMN,WAAjB,CAApB;AACA,UAAI,KAAKG,IAAL,CAAUC,OAAV,GAAoB,CAAxB,EAA2B;AACzB,aAAKD,IAAL,CAAUI,OAAV;AACD;AACF;AACF,GAzBM;;;AA2BP;;;AAGAT,uBAAqB,+BAAY;AAC/B,WAAO,KAAKK,IAAL,CAAUK,QAAV,CAAmBC,GAAnB,CAAuB,KAAKhB,IAAL,CAAUiB,MAAV,CAAiBC,WAAjB,EAAvB,EAAuDC,GAAvD,EAAP;AACA;AACD,GAjCM;;AAmCPb,YAAU,oBAAW;AACnB,SAAKN,IAAL,CAAUoB,YAAV;AACA,SAAKpB,IAAL,CAAUqB,SAAV;AACA,SAAKX,IAAL,CAAUI,OAAV;AACD;AAvCM,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    pickRadius: 0,\r\n    game: {\r\n      default: null,\r\n      // Attributes that specify the default default value are serialized by default.\r\n      // After serialization, the values set in the editor are saved to the scene and other resource files,\r\n      // and the previously set values are automatically restored when the scene is loaded.\r\n      // If you do not want to serialize, you can set serializable: false.\r\n      serializable: false\r\n    }\r\n  },\r\n\r\n  update (dt) {\r\n    if (this.getToPlayerDistance() < this.pickRadius) {\r\n      this.onPicked();\r\n    } else {\r\n      var opacityRate = 1 - this.game.timer / this.game.starDuration;\r\n      this.node.opacity = Math.floor(255 * opacityRate);\r\n      if (this.node.opacity < 5) {\r\n        this.node.destroy();\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @return {number} distance\r\n   */\r\n  getToPlayerDistance: function () {\r\n    return this.node.position.sub(this.game.player.getPosition()).mag()\r\n    // return cc.pDistance(this.node.position, this.game.player.getPosition());\r\n  },\r\n\r\n  onPicked: function() {\r\n    this.game.generateStar();\r\n    this.game.gainScore();\r\n    this.node.destroy();\r\n  },\r\n});\r\n"]}